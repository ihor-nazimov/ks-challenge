#inspired by
#https://medium.com/analytics-vidhya/deploying-a-machine-learning-model-as-a-flask-app-on-heroku-part-1-b5e194fed16d

import os
import tempfile

from flask import Flask, render_template, request, flash, redirect, url_for
from werkzeug.utils import secure_filename
import pandas as pd
import pickle


# UPLOAD_FOLDER = '/tmp/flask'
UPLOAD_FOLDER = tempfile.TemporaryDirectory().name
os.mkdir(UPLOAD_FOLDER)
ALLOWED_EXTENSIONS = {'json'}

app = Flask(__name__)

# generated by os.urandom(24)
app.secret_key = b'\xd4\xef\x88s\xfc^\xfb\xed\xd1\x8d\xab\xa8v\xa9\x17;\xfe\xf9@\x92x\xfe\x13S'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Loading the Pre-trained model using Pickle
with open('./lib/models/LogisticRegression_simple_6_46.pkl', 'rb') as file:
    simple_model = pickle.load(file)

with open('./lib/models/Scaler.pkl', 'rb') as file:
    scaler = pickle.load(file)
with open('./lib/models/LogisticRegression_scaled_full.pkl', 'rb') as file:
    model = pickle.load(file)
logit_features = ['feature_46', 'feature_35',
       'feature_6', 'feature_40', 'feature_47',
       'feature_12', 'feature_4', 'feature_31',
       'feature_18', 'feature_32', 'feature_3']


@app.route('/', methods=['GET', 'POST'])
def main():
    if request.method == 'GET':
        return(render_template('main.html'))    #Getting Form Input
    if request.method == 'POST':
        feature_6 =  request.form['feature_6']
        feature_46 =  request.form['feature_46']
        
        #Putting Form input in a data frame         
        
        input_variables = pd.DataFrame([[feature_6, feature_46]],
        columns=['feature_6', 'feature_46'], dtype=float)

        # Predicting the Wine Quality using the loaded model
        prediction = simple_model.predict(input_variables)[0]
        prediction_proba = simple_model.predict_proba(input_variables)[0,1]
        if prediction == 0.0:
            prediction = "Subscriber is not a driver"
        else: 
            prediction = "Subscriber is a driver"
        
        # prediction = prediction + " \n(prediction_proba = {:.2f})".format(prediction_proba)
        # prediction = prediction + "(prediction_proba = " + prediction_proba + ")"

        return render_template('main.html', 
            result={"class":prediction, 
                "prediction_proba": "{:.3f}".format(prediction_proba)}
        )


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/process_json', methods=['GET', 'POST'])
def process_json():
    if request.method == 'GET':
        app.logger.info('GET catched')
        return render_template('process_json.html')    #Getting Form Input
    if request.method == 'POST':
        # filename =  request.form['file']

        #Putting Form input in a data frame         
        
        # input_variables = pd.DataFrame([[alcohol, malic_acid, ash, alcalinity_of_ash, magnesium, 
        #     total_phenols,flavanoids, nonflavanoid_phenols,proanthocyanins, color_intensity, hue,
        #     od280_od315_of_diluted_wines, proline]],
        # columns=['alcohol', 'malic_acid', 'ash', 'alcalinity_of_ash', 'magnesium','total_phenols', 
        #     'flavanoids', 'nonflavanoid_phenols', 'proanthocyanins', 'color_intensity', 'hue', 'od280/od315_of_diluted_wines', 'proline'], dtype=float)

        # Predicting the Wine Quality using the loaded model
        # prediction = filename
        # model.predict(input_variables)[0]
        # if prediction == 0.0:
        #     prediction = "Poor Wine Quality"
        # elif prediction == 1.0:
        #     prediction = "Good Wine Quality"
        # else:
        #     prediction = "Fine Wine Quality"

        # return render_template('process_json.html', result=prediction)
        # check if the post request has the file part

        app.logger.info('POST catched')
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        app.logger.info('filename=' + file.filename)

        # If the user does not select a file, the browser submits an
        # empty file without a filename.
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            fullfilename = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(fullfilename)
            app.logger.info('Saved:' + fullfilename)

            test_data = pd.read_json(fullfilename)
            print(test_data.shape)
            print('Scaling...')
            X_scaled = pd.DataFrame(scaler.transform(test_data[logit_features]), 
                                    columns=logit_features, index=test_data.index)
            print('Scaling completed')

            print('Prediction...')
            y_pred = model.predict(X_scaled)
            print('Prediction completed')
            y_pred_proba = model.predict_proba(X_scaled)[:,1]
            # y_pred_proba

            predicted_test_data = test_data.join(pd.DataFrame({'y_pred':y_pred, 'y_pred_proba':y_pred_proba}, index=test_data.index))
            predicted_test_data_agg = predicted_test_data[{'id', 'target', 'y_pred_proba'}].groupby('id').mean()
            predicted_test_data_agg['y_pred_agg'] = (predicted_test_data_agg.y_pred_proba >= 0.5).mul(1)
            predicted_test_data_agg['valid_predict'] = predicted_test_data_agg.target == predicted_test_data_agg.y_pred_agg

            # print(predicted_data[{'id', 'y_pred_proba'}].groupby('id').mean())
            # return redirect(url_for('download_file', name=filename))
            # return 
            response = app.response_class(
                response=predicted_test_data_agg[{'target', 'y_pred_agg', 'y_pred_proba', 'valid_predict'}]
                    # .groupby('id').mean().to_json(indent=1),
                    .groupby('id').mean().to_json(),
                status=200,
                mimetype='application/json'
            )
            return response
    return render_template('process_json.html')


if __name__ == '__main__':
    app.run(debug = True)